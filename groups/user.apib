# Group User
## List Users [/api/v1/users{?per_page,term,type,indexed,include,order}]

### List Users [GET]

View a listing of enabled users.

+ Admin required.

+ Parameters

    + per_page: `2` (number, optional) - Enables pagination and set items per page.
    + term: `john` (string, optional) - Filter results using string against 'first_name', 'last_name' and 'email' values.
    + type: `patient` (enum[string], optional) - Filter results by user type.
        + Members
            + `patient`
            + `practitioner`
            + `admin`
    + indexed: `true` (boolean, optional) - Use indexed search, faster and close match, intended for "as you type" searches.
        + default: `false`
    + include: `practitioner` (string, optional) - Join relationship data.
        + Members
            + `patient`
            + `practitioner`
    + order: `created_at|desc` (string, optional) - Sets a column to sort by and an optional direction ('asc', 'desc') by using `|` after column name.
        + Members
            + `id|asc`
            + `id|desc`
            + `created_at|asc`
            + `created_at|desc`
            + `email|asc`
            + `email|desc`
            + `first_name|asc`
            + `first_name|desc`
            + `last_name|asc`
            + `last_name|desc`
            + `terms_accepted_at|asc`
            + `terms_accepted_at|desc`

+ Request Example

    + Headers

            Authorization: Bearer {{ ACCESS_TOKEN }}
            X-Requested-With: XMLHttpRequest
            Content-Type: application/json

+ Response 200 (application/json)

    + Headers

    + Body

            <!-- include(../responses/api/v1/users/get.json) -->

## Create User [/api/v1/users]
### Create User [POST]

Create a new user. This will also create a related `patient`.

+ Request Example

    + Attributes

        + first_name: John (string, required) - User First Name, 100 characters max.
        + last_name: Doe (string, required) - User Last Name, 100 characters max.
        + email: jdoe@somedomain.com (string, required) - Valid email, unique, 150 characters max.
        + password: secret (string, required) - 6 characters min.
        + terms: true (boolean, required) - Must be true.
        + zip: 90401 (number, required) - 5 digits, must be a serviceable zip.

    + Headers

            Authorization: Bearer {{ ACCESS_TOKEN }}
            X-Requested-With: XMLHttpRequest
            Content-Type: application/json

+ Response 201 (application/json)

    + Headers

    + Body

            <!-- include(../responses/api/v1/users/post.json) -->

## Get User [/api/v1/users/{user_id}{?include}]
### Get User [GET]

Get a user by their ID.

+ Require Admin or current logged in user_id matching request.

+ Parameters

    + user_id: `3` (number, required) - Must be a valid ID.
    + include: `practitioner` (string, optional) - Join relationship data.
        + Members
            + `patient`
            + `practitioner`

+ Request Including Practitioner

    + Headers

            Authorization: Bearer {{ ACCESS_TOKEN }}
            X-Requested-With: XMLHttpRequest
            Content-Type: application/json

+ Response 200 (application/json)

    + Headers

    + Body

            <!-- include(../responses/api/v1/users/3/get?include=practitioner.json) -->

## Update User [/api/v1/users/{user_id}]
### Update User [PATCH]

+ Require Admin or current logged in user_id matching request.

+ Parameters

    + user_id: `3` (number, required) - Must be a valid ID.

+ Request Example

    + Body

            {
                "address_1": "Test Address 1234"
            }

    + Attributes

        + first_name: `John` (string, optional) - User First Name, 100 characters max.
        + last_name: `Doe` (string, optional) - User Last Name, 100 characters max.
        + email: `jdoe@somedomain.com` (string, optional) - Valid email, unique, 150 characters max.
        + password: `secret` (string, optional) - 6 characters min.
        + phone: `8006909989` (number, optional) - Unique.
        + zip: `90401` (number, optional) - 5 digits, must be a serviceable zip.

    + Headers

            Authorization: Bearer {{ ACCESS_TOKEN }}
            X-Requested-With: XMLHttpRequest
            Content-Type: application/json

+ Response 200 (application/json)

    + Headers

    + Body

            <!-- include(../responses/api/v1/users/3/patch.json) -->

## List Stripe Credit Cards [/api/v1/users/{user_id}/cards]
### List Credit Cards [GET]

View a listing of credit cards associated to current user.

+ Parameters

    + user_id: `1` (number, required) - Must be a valid ID.

+ Request Example

    + Headers

            Authorization: Bearer {{ ACCESS_TOKEN }}
            X-Requested-With: XMLHttpRequest
            Content-Type: application/json

+ Response 200 (application/json)

    + Headers

    + Body

            <!-- include(../responses/api/v1/users/1/cards/get.json) -->

+ Response 403 (application/json)

    + Headers

    + Body

            {
                "status": "false",
            }

## Add Stripe Credit Card [/api/v1/users/{user_id}/cards]
### Add Credit Card [POST]

Associates a Credit Card with User's Stripe account.
If User is not an Stripe Customer yet, a new account will be created and associated.

+ Parameters

    + user_id: `1` (number, required) - Must be a valid ID and match current user.

+ Request Example

    + Attributes

        + id: `tok_abc...xyz` (string, required) - Credit Card Stripe token.

    + Headers

            Authorization: Bearer {{ ACCESS_TOKEN }}
            X-Requested-With: XMLHttpRequest
            Content-Type: application/json
    + Body

            {
                "id": "tok_1AjwNDHyZ2p8GwQJxcUKLHJn"
            }

+ Response 201 (application/json)

    + Headers

    + Body

+ Response 403 (application/json)

    + Headers

    + Body

            {
                "status": "false",
            }

+ Response 503 (application/json)

    + Headers

    + Body

## Update Stripe Credit Card [/api/v1/users/{user_id}/cards/{card_id}]
### Update Credit Card [PATCH]

Updates a Credit Card associated with User's Stripe account.
Notice this endpoint uses Card ID as parameter, not Card Token ID.
Card ID starts with 'card_'.

+ Parameters

    + user_id: `1` (number, required) - Must be a valid ID and match current user.
    + card_id: `card-1As0VxEBEcbDQSPgOisW4Tz7` (string, required) - Credit Card Stripe ID.

+ Request Example

    + Attributes

        + address_city: `Los Angeles` (string, optional)
        + address_country: `US` (string, optional)
        + address_line1: `7857 Elton Pike` (string, optional)
        + address_line2: `Room #352` (string, optional)
        + address_state: `CA` (string, optional)
        + address_zip: `90401` (string, optional)
        + exp_month: `7` (number, optional)
        + exp_year: `2021` (number, optional)
        + name: `Elizabeth Anderson` (string, optional)

    + Headers

            Authorization: Bearer {{ ACCESS_TOKEN }}
            X-Requested-With: XMLHttpRequest
            Content-Type: application/json

    + Body

            {
                "card_id": "card_1As0VxEBEcbDQSPgOisW4Tz7",
                "name": "Elizabeth Anderson"
            }

+ Response 200 (application/json)

    + Headers

    + Body

+ Response 403 (application/json)

    + Headers

    + Body

            {
                "status": "false",
            }

+ Response 503 (application/json)

    + Headers

    + Body

## Delete Stripe Credit Card [/api/v1/users/{user_id}/cards/{card_id}]
### Delete Credit Card [DELETE]

Deletes a Credit Card from Stripe User account.
Notice this endpoint uses Card ID as parameter, not Card Token ID.
Card ID starts with 'card_'.

+ Parameters

    + user_id: `1` (number, required) - Must be a valid ID and match current user.
    + card_id: `card-1AjwNDHyZ2p8GwQJ7AZnjxWf` (string, required) - Credit Card Stripe ID.

+ Request Example

    + Headers

            Authorization: Bearer {{ ACCESS_TOKEN }}
            X-Requested-With: XMLHttpRequest
            Content-Type: application/json

+ Response 204 (application/json)

+ Response 403 (application/json)

    + Headers

    + Body

            {
                "status": "false",
            }

+ Response 503 (application/json)

    + Headers

    + Body
