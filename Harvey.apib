# Group Harvey

Harvey API

Notes for internal API consumption via Vue.js:
[Laravel Documentation](https://laravel.com/docs/5.4/passport#consuming-your-api-with-javascript).

We make every attempt to adhere to [json-api standards](http://jsonapi.org/format/).

Suggestions or Corrections may be directed to engineers@goharvey.com.

# Group Errors
## Errors Responses [/]
All Error responses will return an appropriate status code along with a body containing an array of error objects with a key of `errors`.

Each error object contains a `title`, `type`, and `detail`.

```json
{
    "errors": [
        {
            "title": "Unauthenticated.",
            "type": "about:blank",
            "detail": "You do not have access to modify the user with id 1."
        }
    ]
}
```

# Group Auth
## Generate Auth Tokens [/oauth/token]
### Generate Auth Tokens [POST]

Get access token and refresh token for a specific user.
Client id and client secret must be provided by a Harvey administrator.

+ Request
    + Headers
        Content-Type: application/json
    + Body
        {
            "grant_type": "password",
            "client_id": 1,
            "client_secret": "0mUktabHH9evbtfoJ3Fyf9EYJ90jbVBeAMArZfsD",
            "username": "patient@goharvey.com",
            "password": "secret",
            "scope": "*"
        }
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/oauth/post-token.json) -->

# Group User
## List Users [/api/v1/users]

### List Users [GET]

View a listing of enabled users.

+ Admin required.

+ Parameters
    + per_page: `2` (number, optional) - Enables pagination and set items per page.
    + term: `john` (string, optional) - Filter results using string against 'first_name', 'last_name' and 'email' values.
    + type: `patient` (enum[string], optional) - Filter results by user type.
        + Members
            + `patient`
            + `practitioner`
            + `admin`
    + indexed: `true` (boolean, optional) - Use indexed search, faster and close match, intended for "as you type" searches.
        + default: `false`
    + include: `practitioner` (string, optional) - Join relationship data.
        + Members
            + `patient`
            + `practitioner`
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/get-users.json) -->

## Create User [/api/v1/users]
### Create User [POST]

Create a new user. This will also create a related `patient`.

+ Parameters
    + first_name: `John` (string, required) - User First Name, 100 characters max.
    + last_name: `Doe` (string, required) - User Last Name, 100 characters max.
    + email: `jdoe@somedomain.com` (string, required) - Valid email, unique, 150 characters max.
    + password: `secret` (string, required) - 6 characters min.
    + terms: `true` (boolean, required) - Must be true.
    + zip: `90401` (number, required) - 5 digits, must be a serviceable zip.
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
    + Body
        {
            "first_name": "John",
            "last_name": "Doe",
            "email": "jdoe@somedomain.com",
            "password": "secret",
            "terms": true,
            "zip": 90401
        }
+ Response 201 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/users/get-3.json) -->

## Get User [/api/v1/users/3]
### Get User [GET]

Get a user by their ID.

+ Require Admin or current logged in user_id matching request.

+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/users/get-3.json) -->

## Update User [/api/v1/users/3]
### Update User [PATCH]

+ Require Admin or current logged in user_id matching request.

+ Parameters
    + first_name: `John` (string, optional) - User First Name, 100 characters max.
    + last_name: `Doe` (string, optional) - User Last Name, 100 characters max.
    + email: `jdoe@somedomain.com` (string, optional) - Valid email, unique, 150 characters max.
    + password: `secret` (string, optional) - 6 characters min.
    + phone: `8006909989` (number, optional) - Unique.
    + zip: `90401` (number, optional) - 5 digits, must be a serviceable zip.
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/users/patch-3.json) -->

# Group Appointment
## List Appointments [/api/v1/appointments]

### List Appointments [GET]

View a listing of appointments associated to the authorized user (Admin role will get *all* the appointments).

+ Parameters
    + include: `patient.user` (string, optional) - Join relationship data.
        + Members
            + `patient`
            + `practitioner`
            + `patient.user`
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/get-appointments.json) -->

## Get Appointment [/api/v1/appointments/1]
### Get Appointment [GET]
View details of a specific appointment.

+ Require Admin or current logged in User as the Practitioner or Patient involved in the appointment.

+ Parameters
    + include: `practitioner` (string, optional) - Join relationship data.
        + Members
            + `patient`
            + `practitioner`
            + `patient.user`

+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json

+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/appointments/get-1.json) -->

## Create an Appointment [/api/v1/appointments]
### Create an Appointment [POST]

+ No special role required.

+ Parameters
    + appointment_at: `2019-03-01 15:30:00` (string, required) - UTC, format "Y-m-d H:i:s", must be in the future.
    + reason_for_visit: `Why not?` (string, required)
    + practitioner_id: `1` (number, optional) - Required if admin or patient. Must be a valid ID.
    + patient_id: `1` (number, optional) - Required if admin or practitioner. Must be a valid ID.
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
    + Body
        {
            "appointment_at": "2019-03-01 15:30:00",
            "reason_for_visit": "Why not?",
            "practitioner_id": 1,
            "patient_id": 1
        }
+ Response 201 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/post-appointments.json) -->

# Group Patient
## List Patients [/api/v1/patients]
### List Patients [GET]

View a listing of enabled patients.

+ Admin or Practitioner required.

+ Parameters
    + per_page: `3` (number, optional) - Enables pagination and set items per page.
    + include: `appointments` (string, optional) - Join relationship data.
        + Members
            + `user`
            + `appointments`
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/get-patients.json) -->

## Get Patient [/api/v1/patients/1]
### Get Patient [GET]

+ Require Admin or current logged in patient_id matching request.

+ Parameters
    + include: `user` (string, optional) - Join relationship data.
        + Members
            + `user`
            + `appointments`
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/patients/get-1.json) -->

## Update Patient [/api/v1/patients/1]
### Update Patient [PATCH]

Update a patient&#39;s information.

+ Require Admin or current logged in patient_id matching request.

+ Parameters
    + birthdate: `1982-11-01` (string, optional) - "Y-m-d" format.
    + height_inches: `3` (number, optional) - Must be integer.
    + height_feet: `5` (number, optional) - Must be integer.
    + weight: `120` (number, optional) - Must be integer.
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
    + Body
        {
            "birthdate": "1984-12-19",
            "height_feet": 6,
            "height_inches": 1,
            "weight": 210
        }
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/patients/patch-1.json) -->

# Group Practitioner
## List Practitioners [/api/v1/practitioners]
### List Practitioners [GET]

View a listing of enabled practitioners.

+ No special role required.

+ Parameters
    + per_page: `3` (number, optional) - Enables pagination and set items per page.
    + include: `user` (string, optional) - Join relationship data (Admin or Practitioner role required).
        + Members
            + `user`
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/get-practitioners.json) -->

## Get Practitioner [/api/v1/practitioners/1?include=availability]
### Get Practitioner [GET]

+ No special role required.

+ Parameters
    + include: `availability` (string, optional) - Join Practitioner availability and/or User relationship (comma-separated).
        + Members
            + `availability`
            + `user`
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/practitioners/get-1.json) -->

# Group Test
## Get Test [/api/v1/tests/1]

### Get Test [GET]

Get test information by id.

+ Require Admin or current logged in User as the Practitioner or Patient involved in the test.

+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/tests/get-1.json) -->

## Upload Test Results [/api/v1/tests/1/results]
### Upload Test Results [POST]
Upload PDF file for test results.

+ No special role required.

+ Parameters
    + file: `results.pdf` (file, required)
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/x-www-form-urlencoded
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/tests/1/post-results.json) -->

# Group Message
## List Messages [/api/v1/messages]
### List Messages [GET]

View a listing of messages associated to the authorized user (Admin role can get any message by using 'recipient_user_id' parameter).

+ Parameters
    + filter: `unread` (string, optional) - Set a filter for messages
        + Members
            + `unread`
    + recipient_user_id: `3` (number, optional) - Get messages for an specific recipient, only Admin can set this parameter. This value will be automatically set to the current logged in user_id.
    + sender_user_id: `3` (number, optional) - Get messages by an specific sender.
    + term: `medicine` (string, optional) - Filter results looking for string inside message body.
    + per_page: `3` (number, optional) - Enables pagination and set items per page.
    + include: `recipient` (string, optional) - Join relationship data (User).
        + Members
            + `sender`
            + `recipient`
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/get-messages.json) -->

## Get Message [/api/v1/messages/1]
### Get a Message [GET]
View details of a specific message.

+ Require Admin or current logged in User as the Sender or Recipient of the message.

+ Parameters
    + include: `recipient` (string, optional) - Join relationship data (User).
        + Members
            + `sender`
            + `recipient`
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/messages/get-1.json) -->

## Mark a message as read [/api/v1/messages/1/read]
### Mark a message as read [PUT]

+ Require Admin or current logged in User as Recipient of the message.

+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/messages/get-2.json) -->

## Create Message [/api/v1/messages]
### Create a Message [POST]

+ No special role required.

+ Parameters
    + recipient_user_id: `9` (number, required) - Recipient, must be a valid ID.
    + message: `Hi there!` (string, optional) - Message body.
    + subject: `Hello` (string, optional) - Message subject.
+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
    + Body
        {
            "recipient_user_id": 9,
            "message": "Hi there!",
            "subject": "This is the subject..."
        }
+ Response 201 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/post-messages.json) -->

## Delete a Message [/api/v1/messages/1]
### Delete a Message [DELETE]

+ Admin role required.

+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 204 (application/json)
    + Headers
    + Body
        <!-- include(responses/api/v1/delete-messages.json) -->

# Group Pagination
## Practitioners Pagination [/api/v1/practitioners?per_page=:number]
### Paginated results [GET]

This example belongs to 'practitioners' endpoint but it perfectly applies to others endpoints
were pagination is available.

+ Parameters
    + per_page: `2` (number, required) - Enables pagination if available.
    + page: `5` (number, optional) - Retrieves an specific page.

+ Request
    + Headers
        Authorization: Bearer {{ ACCESS_TOKEN }}
        X-Requested-With: XMLHttpRequest
        Content-Type: application/json
+ Response 200 (application/json)
    + Headers
    + Body
        {
            "data": [{
                "type": "practitioner",
                "id": "9",
                "attributes": {
                    "name": "Esmeralda Powlowski",
                    "type_name": "Naturopathic Doctor"
                },
                "links": {
                    "self": "http://harvey.app/api/v1/practitioner/9"
                }
            }, {
                "type": "practitioner",
                "id": "10",
                "attributes": {
                    "name": "Marian Gutmann",
                    "type_name": "Naturopathic Doctor"
                },
                "links": {
                    "self": "http://harvey.app/api/v1/practitioner/10"
                }
            }],
            "meta": {
                "pagination": {
                    "total": 40,
                    "count": 2,
                    "per_page": 2,
                    "current_page": 5,
                    "total_pages": 20
                }
            },
            "links": {
                "self": "http://harvey.app/api/v1/practitioners?per_page=2&page=5",
                "first": "http://harvey.app/api/v1/practitioners?per_page=2&page=1",
                "prev": "http://harvey.app/api/v1/practitioners?per_page=2&page=4",
                "next": "http://harvey.app/api/v1/practitioners?per_page=2&page=6",
                "last": "http://harvey.app/api/v1/practitioners?per_page=2&page=20"
            }
        }
